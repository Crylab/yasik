---
 config:
    # Select among: gradient_descent, coordinate_descent
    optimization: nelder_mead
    # Parallel execution:
    parallel: true
    # Number of cores
    n_cores: 4
    # Initial velocity of the straight [m/s]
    init_velocity: 14.0
    # Initial distance shift [m]
    init_distance_shift: 27.5

 inputs:
    brakeFriction_F:
        usage: false
        priority: 3
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
            - LMUX_F
        affect_on:
            accelerationX1:
                filter: "brakePressureF>0.0"
                wrt: brakePressureF
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.001
        tolerance: 0.005
        init_val: 0.46249999999999997
        init_step: 0.01
        access_r: "lib.xmlScalarReading(xml, 'brakeFriction_F')"
        access_w: "lib.xmlScalarWriting(xml, 'brakeFriction_F', value_script_update)"
    brakeFriction_R:
        usage: false
        priority:
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
        affect_on:
            accelerationX:
                filter: "brakePressureR>0.0"
                wrt: brakePressureR
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
        tolerance: 0.01
        init_val: 1.0
        init_step: 0.5
        access_r: "lib.xmlScalarReading(xml, 'brakeFriction_R')"
        access_w: "lib.xmlScalarWriting(xml, 'brakeFriction_R', value_script_update)"
    C_x:
        usage: true
        priority: 7
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
            - powertrain_efficiency
        affect_on:
            accelerationX2:
                filter: "Speed>67.0"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 1
        tolerance: 0.001
        init_val: 1.23
        init_step: -0.03
        access_r: "np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')).item(0, 5)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')).item(0, 5); lib.xmlTextWriting(xml, 'WindTunnelDataLeft', lib.mat2str(lib.matrix_column_shift(np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')), [5], value_script_update - old_script_update))); lib.xmlTextWriting(xml, 'WindTunnelDataRight', lib.mat2str(lib.matrix_column_shift(np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataRight')), [5], value_script_update - old_script_update)))"
    C_y:
        usage: false
        priority: 2
        # Select among: top_speed, snail, laptimer
        experiment: snail
        dependent:
        affect_on:
            Speed:
                wrt: Distance
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: interp_square_cost
            accelerationY:
                wrt: Distance
                # Select among: interp_square_cost, closest_square_cost
                cost: interp_square_cost
        tolerance: 0.01
        init_val: 0.0
        init_step: -2.4
        access_r: "np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')).item(0, 6)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')).item(0, 6); lib.xmlTextWriting(xml, 'WindTunnelDataLeft', lib.mat2str(lib.matrix_column_shift(np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')), [6, 7], value_script_update - old_script_update))); lib.xmlTextWriting(xml, 'WindTunnelDataRight', lib.mat2str(lib.matrix_column_shift(np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataRight')), [6, 7], value_script_update - old_script_update)))"
    
    LMUY_F_old:
        usage: false
        priority: 10
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
            - LMUY_R
        affect_on:
            understeer_index:
                wrt: Distance
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost, lowpass_square_cost
                cost: lowpass_square_cost
            steeringAngle:
                wrt: Distance
                # Select among: interp_square_cost, closest_square_cost, lowpass_square_cost
                cost: lowpass_square_cost
        tolerance: 0.01
        init_val: 1.0
        init_step: 0.9
        access_r: "lib.xmlScalarReading(xml, 'LMUY_FL')"
        access_w: "lib.xmlScalarWriting(xml, 'LMUY_FL', value_script_update); lib.xmlScalarWriting(xml, 'LMUY_FR', value_script_update)"
    arbPositionSetup_F:
        usage: false
        priority: 100
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
            - LMUY_L
        affect_on:
            deltaPushrod_F:
                wrt: deltaDamper_F
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
        tolerance: 1.0
        init_val: 6.0
        init_step: 0.0
        access_r: "lib.xmlScalarReading(xml, 'arbPositionSetup_F')"
        access_w: "lib.xmlScalarWriting(xml, 'arbPositionSetup_F', value_script_update)"
    arbPositionSetup_R:
        usage: false
        priority: 100
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
            - LMUY_L
        affect_on:
            deltaPushrod_R:
                wrt: deltaDamper_R
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
        tolerance: 1.0
        init_val: 6.0
        init_step: 0.0
        access_r: "lib.xmlScalarReading(xml, 'arbPositionSetup_R')"
        access_w: "lib.xmlScalarWriting(xml, 'arbPositionSetup_R', value_script_update)"
    powertrain_efficiency:
        usage: false
        priority: 2
        experiment: laptimer
        dependent:
        affect_on:
            accelerationX3:
                filter: "Speed<67.0 and Speed>41.0"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.001
        tolerance: 0.001
        init_val: 0.95
        init_step: 0.01
        access_r: "lib.xmlScalarReading(xml, 'powertrainEfficiency')"
        access_w: "lib.xmlScalarWriting(xml, 'powertrainEfficiency', value_script_update)"
    LMUX_F:
        usage: true
        priority: 3
        experiment: laptimer
        dependent:
            - LMUX_R
        affect_on:
            brakePressureF:
                filter: "brakePressureF>0.0"
                wrt: accelerationX
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.001
        tolerance: 0.001
        init_val: 0.96
        init_step: -0.01
        access_r: "lib.xmlScalarReading(xml, 'LMUX_FL')"
        access_w: "lib.xmlScalarWriting(xml, 'LMUX_FL', value_script_update); lib.xmlScalarWriting(xml, 'LMUX_FR', value_script_update)"
    LMUX_R:
        usage: false
        priority: 3
        experiment: laptimer
        dependent:
        affect_on:
            accelerationX4:
                filter: "Speed<41.0"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 1
            brakePressureR:
                filter: "brakePressureR>0.0"
                wrt: accelerationX
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.001
        tolerance: 0.001
        init_val: 0.98
        init_step: 0.01
        access_r: "lib.xmlScalarReading(xml, 'LMUX_RL')"
        access_w: "lib.xmlScalarWriting(xml, 'LMUX_RL', value_script_update); lib.xmlScalarWriting(xml, 'LMUX_RR', value_script_update)"
    Gear1:
        usage: false
        priority: 100
        experiment: laptimer
        dependent:
        affect_on:
            rpm:
                filter: "throttle>0.0 and gear<1.5"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
            
        tolerance: 0.01
        init_val: 3.0
        init_step: 0.05
        access_r: "np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')).item(0, 0)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')); old_script_update.A[0][0] = value_script_update; lib.xmlTextWriting(xml, 'gearTableRatio', lib.mat2str(old_script_update))"
    Gear2:
        usage: false
        priority: 100
        experiment: laptimer
        dependent:
        affect_on:
            rpm:
                filter: "throttle>0.0 and gear>1.5 and gear<2.5"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
            
        tolerance: 0.01
        init_val: 2.1
        init_step: 0.1
        access_r: "np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')).item(0, 1)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')); old_script_update.A[0][1] = value_script_update; lib.xmlTextWriting(xml, 'gearTableRatio', lib.mat2str(old_script_update))"
    Gear3:
        usage: true
        priority: 1
        experiment: laptimer
        dependent:
        affect_on:
            rpm:
                filter: "throttle>0.95 and gear>2.5 and gear<3.5"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.0000001
        tolerance: 0.01
        init_val: 1.764
        init_step: 0.1
        access_r: "np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')).item(0, 2)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')); old_script_update.A[0][2] = value_script_update; lib.xmlTextWriting(xml, 'gearTableRatio', lib.mat2str(old_script_update))"
    Gear4:
        usage: true
        priority: 1
        experiment: laptimer
        dependent:
        affect_on:
            rpm:
                filter: "throttle>0.95 and gear>3.5 and gear<4.5"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.0000001
            
        tolerance: 0.01
        init_val: 1.5
        init_step: 0.1
        access_r: "np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')).item(0, 3)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')); old_script_update.A[0][3] = value_script_update; lib.xmlTextWriting(xml, 'gearTableRatio', lib.mat2str(old_script_update))"
    Gear5:
        usage: false
        priority: 100
        experiment: laptimer
        dependent:
        affect_on:
            rpm:
                filter: "throttle>0.95 and gear>4.5 and gear<5.5"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.0000001
        tolerance: 0.001
        init_val: 1.0
        init_step: 0.1
        access_r: "np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')).item(0, 4)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')); old_script_update.A[0][4] = value_script_update; lib.xmlTextWriting(xml, 'gearTableRatio', lib.mat2str(old_script_update))"
    Gear6:
        usage: false
        priority: 1
        experiment: laptimer
        dependent:
        affect_on:
            rpm:
                filter: "throttle>0.95 and gear>5.5 and gear<6.5"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost
                cost: regress_square_cost
                multiplicator: 0.0000001
        tolerance: 0.001
        init_val: 1.082296875
        init_step: 0.1
        access_r: "np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')).item(0, 5)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'gearTableRatio')); old_script_update.A[0][5] = value_script_update; lib.xmlTextWriting(xml, 'gearTableRatio', lib.mat2str(old_script_update))"
    c_torsion_R:
        usage: true
        priority: 4
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
        affect_on:
            rideHeightAeroF2:
                filter: "throttle>0.95"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost, lowpass_square_cost
                cost: regress_square_cost
                multiplicator: 4800
        tolerance: 10.0
        init_val: 177000.0
        init_step: -200.0
        access_r: "lib.xmlScalarReading(xml, 'c_torsion_RL')"
        access_w: "lib.xmlScalarWriting(xml, 'c_torsion_RL', value_script_update); lib.xmlScalarWriting(xml, 'c_torsion_RR', value_script_update)"
    C_zF:
        usage: false
        priority: 4
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
        affect_on:
            accelerationYABS:
                filter: "throttle>0.95 and Speed>40.0"
                wrt: Speed
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost, lowpass_square_cost
                cost: regress_square_cost
                multiplicator: 0.27
        tolerance: 0.001
        init_val: 1.8
        init_step: 0.05
        access_r: "np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')).item(0, 6)"
        access_w: "old_script_update = np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')).item(0, 6); lib.xmlTextWriting(xml, 'WindTunnelDataLeft', lib.mat2str(lib.matrix_column_shift(np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataLeft')), [6], value_script_update - old_script_update))); lib.xmlTextWriting(xml, 'WindTunnelDataRight', lib.mat2str(lib.matrix_column_shift(np.matrix(lib.xmlTextReading(xml, 'WindTunnelDataRight')), [6], value_script_update - old_script_update)))"
    LMUY_F:
        usage: true
        priority: 4
        # Select among: top_speed, snail, laptimer
        experiment: laptimer
        dependent:
            - C_zF
            - c_torsion_R
        affect_on:
            steeringAngle:
                wrt: Distance
                # Select among: interp_square_cost, closest_square_cost, regress_square_cost, lowpass_square_cost
                cost: closest_square_cost
                multiplicator: 0.00375

        tolerance: 0.001
        init_val: 0.97
        init_step: 0.01
        access_r: "lib.xmlScalarReading(xml, 'LMUY_FL')"
        access_w: "lib.xmlScalarWriting(xml, 'LMUY_FL', value_script_update); lib.xmlScalarWriting(xml, 'LMUY_FR', value_script_update)"
 outputs:
    Speed: true
    accelerationY: true
    Distance: true
    accelerationX: true
    accelerationX1: true
    accelerationX2: true
    accelerationX3: true
    accelerationX4: true
    brakePressureF: true
    brakePressureR: true
    understeer_index: true
    rpm: true
    throttle: true
    gear: true
    accelerationYABS: true
    steeringAngle: true
    steeringAngle1: true
    steeringAngle2: true
    deltaDamper_F: true
    deltaPushrod_F: true
    rideHeightAeroF: true
    rideHeightAeroF1: true
    rideHeightAeroF2: true
    accelerationYABS1: true
    accelerationYABS2: true
 mat_outputs:
    top_speed:
    snail:
    laptimer:
        understeer_index: "((tyreSlipYFL+tyreSlipYFR)/2)-((tyreSlipYRL+tyreSlipYRR)/2)"
        rideHeightAeroF1: "rideHeightAeroF"
        rideHeightAeroF2: "rideHeightAeroF"
        accelerationX1: "accelerationX"
        accelerationX2: "accelerationX"
        accelerationX3: "accelerationX"
        accelerationX4: "accelerationX"
        deltaPushrod_F: "pushrodForceFL - pushrodForceFR"
        deltaDamper_F: "damperTravelFL - damperTravelFR"
        deltaPushrod_R: "pushrodForceRL - pushrodForceRR"
        deltaDamper_R: "damperTravelRL - damperTravelRR"
        accelerationYABS: "abs(accelerationY)"
        accelerationYABS1: "abs(accelerationY)"
        accelerationYABS2: "abs(accelerationY)"
        steeringAngle1: "steeringAngle"
        steeringAngle2: "steeringAngle"
 output_aliasing:
    Lap Distance: Distance
    LapDistance: Distance
    speed: Speed
